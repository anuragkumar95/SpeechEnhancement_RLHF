
Start training...
/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/functional.py:572: UserWarning: stft will soon require the return_complex parameter be given for real inputs, and will further require that return_complex=True in a future PyTorch release. (Triggered internally at  ../aten/src/ATen/native/SpectralOps.cpp:659.)
  return _VF.stft(input, n_fft, hop_length, win_length, window,  # type: ignore[attr-defined]
/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/functional.py:647: UserWarning: istft will require a complex-valued input tensor in a future PyTorch release. Matching the output from stft with return_complex=True.  (Triggered internally at  ../aten/src/ATen/native/SpectralOps.cpp:811.)
  return _VF.istft(input, n_fft, hop_length, win_length, window, center,  # type: ignore[attr-defined]
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:0 Reward:0.00046956539154052734
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:1 Reward:0.001161813735961914
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:2 Reward:-0.00030040740966796875
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:3 Reward:-0.00015103816986083984
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:4 Reward:0.00035965442657470703
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:5 Reward:0.0029146671295166016
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:6 Reward:-0.0028836727142333984
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:7 Reward:-0.00010955333709716797
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:8 Reward:0.006455779075622559
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:9 Reward:0.0074738264083862305
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:10 Reward:0.00015151500701904297
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:11 Reward:-0.0001773834228515625
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:12 Reward:-0.0017435550689697266
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:13 Reward:-0.002159714698791504
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:14 Reward:-0.0005232095718383789
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:15 Reward:-0.0014449357986450195
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:16 Reward:0.0003439188003540039
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:17 Reward:-0.00015819072723388672
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:18 Reward:6.818771362304688e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:19 Reward:-0.0006979703903198242
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:20 Reward:-0.0005458593368530273
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:21 Reward:-0.0008819103240966797
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:22 Reward:-0.007265686988830566
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:23 Reward:0.0036780834197998047
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:24 Reward:-0.00011897087097167969
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:25 Reward:-0.0002491474151611328
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:26 Reward:-0.0018192529678344727
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:27 Reward:0.00031638145446777344
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:28 Reward:-0.00392758846282959
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:29 Reward:-0.014585375785827637
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:30 Reward:-0.0032297372817993164
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:31 Reward:-0.0003782510757446289
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:32 Reward:-0.0004903078079223633
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:33 Reward:-0.0006099939346313477
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:34 Reward:-0.0035587549209594727
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:35 Reward:-0.0019009113311767578
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:36 Reward:0.0003370046615600586
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:37 Reward:-0.0005364418029785156
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:38 Reward:-2.5153160095214844e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:39 Reward:-0.00018405914306640625
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:40 Reward:2.9087066650390625e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:41 Reward:0.0009905099868774414
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:42 Reward:-0.0012367963790893555
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:43 Reward:-0.0012912750244140625
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:44 Reward:0.0014340877532958984
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:45 Reward:-0.00039327144622802734
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:46 Reward:6.783008575439453e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:47 Reward:-0.0003083944320678711
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:48 Reward:0.0025464296340942383
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:49 Reward:5.7220458984375e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:50 Reward:0.00026977062225341797
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:51 Reward:-0.0007611513137817383
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:52 Reward:-0.000544428825378418
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:53 Reward:-0.17238950729370117
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:54 Reward:-0.00032126903533935547
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:55 Reward:-0.00019228458404541016
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:56 Reward:-0.004384040832519531
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:57 Reward:-0.00492405891418457
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:58 Reward:-0.0009559392929077148
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:59 Reward:-0.0029779672622680664
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:60 Reward:-0.0005080699920654297
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:61 Reward:-0.00354766845703125
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:62 Reward:-0.0004214048385620117
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:63 Reward:0.00044333934783935547
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:64 Reward:-1.049041748046875e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:65 Reward:-0.0006493330001831055
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:66 Reward:-0.0015648603439331055
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:67 Reward:-0.0011867284774780273
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:68 Reward:0.001361846923828125
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:69 Reward:-0.00016367435455322266
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:70 Reward:3.2901763916015625e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:71 Reward:-1.4543533325195312e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:72 Reward:-0.0012044906616210938
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:73 Reward:-8.893013000488281e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:74 Reward:0.00017058849334716797
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:75 Reward:-0.0016024112701416016
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:76 Reward:-0.0001933574676513672
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:77 Reward:-0.0007165670394897461
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:78 Reward:0.00064849853515625
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:79 Reward:4.863739013671875e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:80 Reward:2.6464462280273438e-05
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:81 Reward:0.0005718469619750977
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:82 Reward:0.007308602333068848
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Step:83 Reward:-0.005451679229736328
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
mask:torch.Size([1, 1, 201]), x:torch.Size([1, 1, 201, 321])
Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7f8f98332f70>
Traceback (most recent call last):
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1328, in __del__
    self._shutdown_workers()
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1301, in _shutdown_workers
    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/multiprocessing/process.py", line 149, in join
    res = self._popen.wait(timeout)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/multiprocessing/popen_fork.py", line 40, in wait
    if not wait([self.sentinel], timeout):
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/multiprocessing/connection.py", line 931, in wait
    ready = selector.select(timeout)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/selectors.py", line 416, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt:
Traceback (most recent call last):
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/train.py", line 458, in <module>
    main(None, world_size, ARGS)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/train.py", line 443, in main
    trainer.train(args)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/train.py", line 383, in train
    re_map, epoch_actor_loss, epoch_critic_loss,epoch_pesq = self.train_one_epoch(epoch, rewards, args)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/train.py", line 343, in train_one_epoch
    ep_rewards, actor_loss, critic_loss = self.train_one_episode(env, rewards, args)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/train.py", line 252, in train_one_episode
    a_action = self.actor(a_inp)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/model/actor.py", line 218, in forward
    complex_mu, complex_sigma = self.complex_decoder(out_5)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/model/actor.py", line 182, in forward
    x = self.dense_block(x)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/anuragkumar/Anurag/SpeechEnhancement_RLHF/src/model/actor.py", line 43, in forward
    out = getattr(self, "conv{}".format(i + 1))(out)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 446, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/Users/anuragkumar/opt/miniconda3/envs/rlhf-debug/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 442, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
KeyboardInterrupt